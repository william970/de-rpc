// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace testNamespace {

namespace {

const ::google::protobuf::Descriptor* NumRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* NumService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Test_2eproto() {
  protobuf_AddDesc_Test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Test.proto");
  GOOGLE_CHECK(file != NULL);
  NumRequest_descriptor_ = file->message_type(0);
  static const int NumRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumRequest, input1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumRequest, input2_),
  };
  NumRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumRequest_descriptor_,
      NumRequest::default_instance_,
      NumRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumRequest));
  NumResponse_descriptor_ = file->message_type(1);
  static const int NumResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumResponse, output_),
  };
  NumResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumResponse_descriptor_,
      NumResponse::default_instance_,
      NumResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumResponse));
  NumService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumRequest_descriptor_, &NumRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumResponse_descriptor_, &NumResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Test_2eproto() {
  delete NumRequest::default_instance_;
  delete NumRequest_reflection_;
  delete NumResponse::default_instance_;
  delete NumResponse_reflection_;
}

void protobuf_AddDesc_Test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTest.proto\022\rtestNamespace\",\n\nNumReques"
    "t\022\016\n\006input1\030\001 \001(\005\022\016\n\006input2\030\002 \001(\005\"\035\n\013Num"
    "Response\022\016\n\006output\030\001 \001(\0052\212\001\n\nNumService\022"
    "<\n\003add\022\031.testNamespace.NumRequest\032\032.test"
    "Namespace.NumResponse\022>\n\005minus\022\031.testNam"
    "espace.NumRequest\032\032.testNamespace.NumRes"
    "ponseB\003\200\001\001", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Test.proto", &protobuf_RegisterTypes);
  NumRequest::default_instance_ = new NumRequest();
  NumResponse::default_instance_ = new NumResponse();
  NumRequest::default_instance_->InitAsDefaultInstance();
  NumResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Test_2eproto {
  StaticDescriptorInitializer_Test_2eproto() {
    protobuf_AddDesc_Test_2eproto();
  }
} static_descriptor_initializer_Test_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NumRequest::kInput1FieldNumber;
const int NumRequest::kInput2FieldNumber;
#endif  // !_MSC_VER

NumRequest::NumRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumRequest::InitAsDefaultInstance() {
}

NumRequest::NumRequest(const NumRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumRequest::SharedCtor() {
  _cached_size_ = 0;
  input1_ = 0;
  input2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumRequest::~NumRequest() {
  SharedDtor();
}

void NumRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumRequest_descriptor_;
}

const NumRequest& NumRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Test_2eproto();
  return *default_instance_;
}

NumRequest* NumRequest::default_instance_ = NULL;

NumRequest* NumRequest::New() const {
  return new NumRequest;
}

void NumRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    input1_ = 0;
    input2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 input1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input1_)));
          set_has_input1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_input2;
        break;
      }

      // optional int32 input2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input2_)));
          set_has_input2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 input1 = 1;
  if (has_input1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input1(), output);
  }

  // optional int32 input2 = 2;
  if (has_input2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->input2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 input1 = 1;
  if (has_input1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input1(), target);
  }

  // optional int32 input2 = 2;
  if (has_input2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->input2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 input1 = 1;
    if (has_input1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input1());
    }

    // optional int32 input2 = 2;
    if (has_input2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumRequest::MergeFrom(const NumRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input1()) {
      set_input1(from.input1());
    }
    if (from.has_input2()) {
      set_input2(from.input2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumRequest::CopyFrom(const NumRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumRequest::IsInitialized() const {

  return true;
}

void NumRequest::Swap(NumRequest* other) {
  if (other != this) {
    std::swap(input1_, other->input1_);
    std::swap(input2_, other->input2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumRequest_descriptor_;
  metadata.reflection = NumRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumResponse::kOutputFieldNumber;
#endif  // !_MSC_VER

NumResponse::NumResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumResponse::InitAsDefaultInstance() {
}

NumResponse::NumResponse(const NumResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumResponse::SharedCtor() {
  _cached_size_ = 0;
  output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumResponse::~NumResponse() {
  SharedDtor();
}

void NumResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumResponse_descriptor_;
}

const NumResponse& NumResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Test_2eproto();
  return *default_instance_;
}

NumResponse* NumResponse::default_instance_ = NULL;

NumResponse* NumResponse::New() const {
  return new NumResponse;
}

void NumResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    output_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 output = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_)));
          set_has_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 output = 1;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->output(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 output = 1;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->output(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 output = 1;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumResponse::MergeFrom(const NumResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_output()) {
      set_output(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumResponse::CopyFrom(const NumResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumResponse::IsInitialized() const {

  return true;
}

void NumResponse::Swap(NumResponse* other) {
  if (other != this) {
    std::swap(output_, other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumResponse_descriptor_;
  metadata.reflection = NumResponse_reflection_;
  return metadata;
}


// ===================================================================

NumService::~NumService() {}

const ::google::protobuf::ServiceDescriptor* NumService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* NumService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumService_descriptor_;
}

void NumService::add(::google::protobuf::RpcController* controller,
                         const ::testNamespace::NumRequest*,
                         ::testNamespace::NumResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add() not implemented.");
  done->Run();
}

void NumService::minus(::google::protobuf::RpcController* controller,
                         const ::testNamespace::NumRequest*,
                         ::testNamespace::NumResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method minus() not implemented.");
  done->Run();
}

void NumService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), NumService_descriptor_);
  switch(method->index()) {
    case 0:
      add(controller,
             ::google::protobuf::down_cast<const ::testNamespace::NumRequest*>(request),
             ::google::protobuf::down_cast< ::testNamespace::NumResponse*>(response),
             done);
      break;
    case 1:
      minus(controller,
             ::google::protobuf::down_cast<const ::testNamespace::NumRequest*>(request),
             ::google::protobuf::down_cast< ::testNamespace::NumResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NumService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::testNamespace::NumRequest::default_instance();
    case 1:
      return ::testNamespace::NumRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& NumService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::testNamespace::NumResponse::default_instance();
    case 1:
      return ::testNamespace::NumResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

NumService_Stub::NumService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
NumService_Stub::NumService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
NumService_Stub::~NumService_Stub() {
  if (owns_channel_) delete channel_;
}

void NumService_Stub::add(::google::protobuf::RpcController* controller,
                              const ::testNamespace::NumRequest* request,
                              ::testNamespace::NumResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void NumService_Stub::minus(::google::protobuf::RpcController* controller,
                              const ::testNamespace::NumRequest* request,
                              ::testNamespace::NumResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace testNamespace

// @@protoc_insertion_point(global_scope)
