// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolBody.proto

#ifndef PROTOBUF_ProtocolBody_2eproto__INCLUDED
#define PROTOBUF_ProtocolBody_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtocolBody_2eproto();
void protobuf_AssignDesc_ProtocolBody_2eproto();
void protobuf_ShutdownFile_ProtocolBody_2eproto();

class ProtocolBodyRequest;
class ProtocolBodyResponse;

// ===================================================================

class ProtocolBodyRequest : public ::google::protobuf::Message {
 public:
  ProtocolBodyRequest();
  virtual ~ProtocolBodyRequest();

  ProtocolBodyRequest(const ProtocolBodyRequest& from);

  inline ProtocolBodyRequest& operator=(const ProtocolBodyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolBodyRequest& default_instance();

  void Swap(ProtocolBodyRequest* other);

  // implements Message ----------------------------------------------

  ProtocolBodyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolBodyRequest& from);
  void MergeFrom(const ProtocolBodyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serviceName = 1;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  inline void set_allocated_servicename(::std::string* servicename);

  // optional uint32 methodIndex = 2;
  inline bool has_methodindex() const;
  inline void clear_methodindex();
  static const int kMethodIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 methodindex() const;
  inline void set_methodindex(::google::protobuf::uint32 value);

  // optional uint32 callId = 3;
  inline bool has_callid() const;
  inline void clear_callid();
  static const int kCallIdFieldNumber = 3;
  inline ::google::protobuf::uint32 callid() const;
  inline void set_callid(::google::protobuf::uint32 value);

  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ProtocolBodyRequest)
 private:
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_methodindex();
  inline void clear_has_methodindex();
  inline void set_has_callid();
  inline void clear_has_callid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servicename_;
  ::google::protobuf::uint32 methodindex_;
  ::google::protobuf::uint32 callid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtocolBody_2eproto();
  friend void protobuf_AssignDesc_ProtocolBody_2eproto();
  friend void protobuf_ShutdownFile_ProtocolBody_2eproto();

  void InitAsDefaultInstance();
  static ProtocolBodyRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolBodyResponse : public ::google::protobuf::Message {
 public:
  ProtocolBodyResponse();
  virtual ~ProtocolBodyResponse();

  ProtocolBodyResponse(const ProtocolBodyResponse& from);

  inline ProtocolBodyResponse& operator=(const ProtocolBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolBodyResponse& default_instance();

  void Swap(ProtocolBodyResponse* other);

  // implements Message ----------------------------------------------

  ProtocolBodyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolBodyResponse& from);
  void MergeFrom(const ProtocolBodyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 callId = 1;
  inline bool has_callid() const;
  inline void clear_callid();
  static const int kCallIdFieldNumber = 1;
  inline ::google::protobuf::uint32 callid() const;
  inline void set_callid(::google::protobuf::uint32 value);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ProtocolBodyResponse)
 private:
  inline void set_has_callid();
  inline void clear_has_callid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 callid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtocolBody_2eproto();
  friend void protobuf_AssignDesc_ProtocolBody_2eproto();
  friend void protobuf_ShutdownFile_ProtocolBody_2eproto();

  void InitAsDefaultInstance();
  static ProtocolBodyResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtocolBodyRequest

// optional string serviceName = 1;
inline bool ProtocolBodyRequest::has_servicename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolBodyRequest::set_has_servicename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolBodyRequest::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolBodyRequest::clear_servicename() {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    servicename_->clear();
  }
  clear_has_servicename();
}
inline const ::std::string& ProtocolBodyRequest::servicename() const {
  return *servicename_;
}
inline void ProtocolBodyRequest::set_servicename(const ::std::string& value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void ProtocolBodyRequest::set_servicename(const char* value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void ProtocolBodyRequest::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolBodyRequest::mutable_servicename() {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  return servicename_;
}
inline ::std::string* ProtocolBodyRequest::release_servicename() {
  clear_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servicename_;
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProtocolBodyRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    delete servicename_;
  }
  if (servicename) {
    set_has_servicename();
    servicename_ = servicename;
  } else {
    clear_has_servicename();
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 methodIndex = 2;
inline bool ProtocolBodyRequest::has_methodindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolBodyRequest::set_has_methodindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolBodyRequest::clear_has_methodindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolBodyRequest::clear_methodindex() {
  methodindex_ = 0u;
  clear_has_methodindex();
}
inline ::google::protobuf::uint32 ProtocolBodyRequest::methodindex() const {
  return methodindex_;
}
inline void ProtocolBodyRequest::set_methodindex(::google::protobuf::uint32 value) {
  set_has_methodindex();
  methodindex_ = value;
}

// optional uint32 callId = 3;
inline bool ProtocolBodyRequest::has_callid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtocolBodyRequest::set_has_callid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtocolBodyRequest::clear_has_callid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtocolBodyRequest::clear_callid() {
  callid_ = 0u;
  clear_has_callid();
}
inline ::google::protobuf::uint32 ProtocolBodyRequest::callid() const {
  return callid_;
}
inline void ProtocolBodyRequest::set_callid(::google::protobuf::uint32 value) {
  set_has_callid();
  callid_ = value;
}

// optional bytes content = 4;
inline bool ProtocolBodyRequest::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtocolBodyRequest::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtocolBodyRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtocolBodyRequest::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ProtocolBodyRequest::content() const {
  return *content_;
}
inline void ProtocolBodyRequest::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtocolBodyRequest::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtocolBodyRequest::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolBodyRequest::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ProtocolBodyRequest::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProtocolBodyRequest::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProtocolBodyResponse

// optional uint32 callId = 1;
inline bool ProtocolBodyResponse::has_callid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolBodyResponse::set_has_callid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolBodyResponse::clear_has_callid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolBodyResponse::clear_callid() {
  callid_ = 0u;
  clear_has_callid();
}
inline ::google::protobuf::uint32 ProtocolBodyResponse::callid() const {
  return callid_;
}
inline void ProtocolBodyResponse::set_callid(::google::protobuf::uint32 value) {
  set_has_callid();
  callid_ = value;
}

// optional bytes content = 2;
inline bool ProtocolBodyResponse::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolBodyResponse::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolBodyResponse::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolBodyResponse::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ProtocolBodyResponse::content() const {
  return *content_;
}
inline void ProtocolBodyResponse::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtocolBodyResponse::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtocolBodyResponse::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtocolBodyResponse::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ProtocolBodyResponse::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProtocolBodyResponse::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtocolBody_2eproto__INCLUDED
