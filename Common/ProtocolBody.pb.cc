// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolBody.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtocolBody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtocolBodyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolBodyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtocolBodyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolBodyResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtocolBody_2eproto() {
  protobuf_AddDesc_ProtocolBody_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtocolBody.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolBodyRequest_descriptor_ = file->message_type(0);
  static const int ProtocolBodyRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyRequest, servicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyRequest, methodindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyRequest, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyRequest, content_),
  };
  ProtocolBodyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolBodyRequest_descriptor_,
      ProtocolBodyRequest::default_instance_,
      ProtocolBodyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolBodyRequest));
  ProtocolBodyResponse_descriptor_ = file->message_type(1);
  static const int ProtocolBodyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyResponse, callid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyResponse, content_),
  };
  ProtocolBodyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolBodyResponse_descriptor_,
      ProtocolBodyResponse::default_instance_,
      ProtocolBodyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolBodyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolBodyResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtocolBody_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolBodyRequest_descriptor_, &ProtocolBodyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolBodyResponse_descriptor_, &ProtocolBodyResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtocolBody_2eproto() {
  delete ProtocolBodyRequest::default_instance_;
  delete ProtocolBodyRequest_reflection_;
  delete ProtocolBodyResponse::default_instance_;
  delete ProtocolBodyResponse_reflection_;
}

void protobuf_AddDesc_ProtocolBody_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtocolBody.proto\"`\n\023ProtocolBodyRequ"
    "est\022\023\n\013serviceName\030\001 \001(\t\022\023\n\013methodIndex\030"
    "\002 \001(\r\022\016\n\006callId\030\003 \001(\r\022\017\n\007content\030\004 \001(\014\"7"
    "\n\024ProtocolBodyResponse\022\016\n\006callId\030\001 \001(\r\022\017"
    "\n\007content\030\002 \001(\014B\003\200\001\001", 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtocolBody.proto", &protobuf_RegisterTypes);
  ProtocolBodyRequest::default_instance_ = new ProtocolBodyRequest();
  ProtocolBodyResponse::default_instance_ = new ProtocolBodyResponse();
  ProtocolBodyRequest::default_instance_->InitAsDefaultInstance();
  ProtocolBodyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtocolBody_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtocolBody_2eproto {
  StaticDescriptorInitializer_ProtocolBody_2eproto() {
    protobuf_AddDesc_ProtocolBody_2eproto();
  }
} static_descriptor_initializer_ProtocolBody_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtocolBodyRequest::kServiceNameFieldNumber;
const int ProtocolBodyRequest::kMethodIndexFieldNumber;
const int ProtocolBodyRequest::kCallIdFieldNumber;
const int ProtocolBodyRequest::kContentFieldNumber;
#endif  // !_MSC_VER

ProtocolBodyRequest::ProtocolBodyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolBodyRequest::InitAsDefaultInstance() {
}

ProtocolBodyRequest::ProtocolBodyRequest(const ProtocolBodyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolBodyRequest::SharedCtor() {
  _cached_size_ = 0;
  servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  methodindex_ = 0u;
  callid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolBodyRequest::~ProtocolBodyRequest() {
  SharedDtor();
}

void ProtocolBodyRequest::SharedDtor() {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    delete servicename_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ProtocolBodyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolBodyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolBodyRequest_descriptor_;
}

const ProtocolBodyRequest& ProtocolBodyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolBody_2eproto();
  return *default_instance_;
}

ProtocolBodyRequest* ProtocolBodyRequest::default_instance_ = NULL;

ProtocolBodyRequest* ProtocolBodyRequest::New() const {
  return new ProtocolBodyRequest;
}

void ProtocolBodyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servicename()) {
      if (servicename_ != &::google::protobuf::internal::kEmptyString) {
        servicename_->clear();
      }
    }
    methodindex_ = 0u;
    callid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolBodyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serviceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servicename().data(), this->servicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_methodIndex;
        break;
      }

      // optional uint32 methodIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_methodIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &methodindex_)));
          set_has_methodindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_callId;
        break;
      }

      // optional uint32 callId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &callid_)));
          set_has_callid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolBodyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string serviceName = 1;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servicename(), output);
  }

  // optional uint32 methodIndex = 2;
  if (has_methodindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->methodindex(), output);
  }

  // optional uint32 callId = 3;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->callid(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolBodyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string serviceName = 1;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servicename(), target);
  }

  // optional uint32 methodIndex = 2;
  if (has_methodindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->methodindex(), target);
  }

  // optional uint32 callId = 3;
  if (has_callid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->callid(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolBodyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serviceName = 1;
    if (has_servicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicename());
    }

    // optional uint32 methodIndex = 2;
    if (has_methodindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->methodindex());
    }

    // optional uint32 callId = 3;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->callid());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolBodyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolBodyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolBodyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolBodyRequest::MergeFrom(const ProtocolBodyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servicename()) {
      set_servicename(from.servicename());
    }
    if (from.has_methodindex()) {
      set_methodindex(from.methodindex());
    }
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolBodyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolBodyRequest::CopyFrom(const ProtocolBodyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolBodyRequest::IsInitialized() const {

  return true;
}

void ProtocolBodyRequest::Swap(ProtocolBodyRequest* other) {
  if (other != this) {
    std::swap(servicename_, other->servicename_);
    std::swap(methodindex_, other->methodindex_);
    std::swap(callid_, other->callid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolBodyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolBodyRequest_descriptor_;
  metadata.reflection = ProtocolBodyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtocolBodyResponse::kCallIdFieldNumber;
const int ProtocolBodyResponse::kContentFieldNumber;
#endif  // !_MSC_VER

ProtocolBodyResponse::ProtocolBodyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtocolBodyResponse::InitAsDefaultInstance() {
}

ProtocolBodyResponse::ProtocolBodyResponse(const ProtocolBodyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtocolBodyResponse::SharedCtor() {
  _cached_size_ = 0;
  callid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolBodyResponse::~ProtocolBodyResponse() {
  SharedDtor();
}

void ProtocolBodyResponse::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ProtocolBodyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolBodyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolBodyResponse_descriptor_;
}

const ProtocolBodyResponse& ProtocolBodyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolBody_2eproto();
  return *default_instance_;
}

ProtocolBodyResponse* ProtocolBodyResponse::default_instance_ = NULL;

ProtocolBodyResponse* ProtocolBodyResponse::New() const {
  return new ProtocolBodyResponse;
}

void ProtocolBodyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolBodyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 callId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &callid_)));
          set_has_callid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtocolBodyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 callId = 1;
  if (has_callid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->callid(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtocolBodyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 callId = 1;
  if (has_callid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->callid(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtocolBodyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 callId = 1;
    if (has_callid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->callid());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolBodyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolBodyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolBodyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolBodyResponse::MergeFrom(const ProtocolBodyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callid()) {
      set_callid(from.callid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolBodyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolBodyResponse::CopyFrom(const ProtocolBodyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolBodyResponse::IsInitialized() const {

  return true;
}

void ProtocolBodyResponse::Swap(ProtocolBodyResponse* other) {
  if (other != this) {
    std::swap(callid_, other->callid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolBodyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolBodyResponse_descriptor_;
  metadata.reflection = ProtocolBodyResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
